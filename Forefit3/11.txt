import java.io.I0Exception;
import java.io.InvalidObjectException;
import java.util.Iterator;
import java.util.StringTokenizer;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;

public class WordCountMR {

public static class MyMap extends MapReduceBase implements Mapper‹LongWritable, Text. Text, IntWritable>
{
private Text mykey = new Text();
public void map(LongWritable key, Text value , OutputCollector<Text, IntWritable> output, Reporter reporter) throws I0Exception
{
String line = value.toString();
StringTokenizer tokenizer = new StringTokenizer(line);
while (tokenizer.hasMoreTokens())
{
mykey.set(tokenizer.nextToken());
output.collect(mykey , new IntWritable(1));
}
}
}

public static class MyReduce extends MapReduceBase implements Reducer<Text, Intwritable, Text, Intwritable>

{
public void reduce (Text key , Iterator<IntWritable> values, OutputCollector<Text , IntWritable output, Reporter reporter) throws I0Exception
int sum = 0;
while (values.hasNext()) {
sum += values.next().get();
}
output.collect(key,new Intwritable(sum));
}
}
public static void main(String[] args) throws Exception {

JobConf conf = new JobConf(WordCountMR.class);
conf.setJobName("MyFirstProgram");

conf.setMapperClass(MyMap.class);
//conf.setCombiner(Combiner.class);
conf.setReducerClass(MyReduce.class);

conf.setOutputKeyClass(Text.class);
conf.setOutputValueClass(IntWritable.class);

conf.setInputFormat(TextInputFormat.class);
conf.setOutputFormat(TextOutputFormat.class);

FileInputFormat.setInputPaths(conf, new Path(args[0]));
FileOutputFormat.setOutputPath(conf, new Path(args[1]));

Jobclient.runJob(conf);
}
}
